{"version":3,"sources":["serviceWorker.js","social-profile/StylesForSocialProfile.js","social-profile/socialProfile.jsx","statistics/StylesForStatistics.js","statistics/RandomColor.js","statistics/statistics.jsx","friend-list/StylesForFriendList.js","friend-list/FriendsList.jsx","transaction-history/StylesForTransanctionHistory.js","transaction-history/TransactionHistory.jsx","index.js"],"names":["Boolean","window","location","hostname","match","StyledProfileWrapper","styled","div","StyledProfileDescription","StyledAvatar","img","StyledUserName","p","StyledUserTag","StyledUserLocation","StyledProfileStats","ul","StyledProfileViews","li","StyledProfileFollowers","StyledProfileLikes","StyledStatsQuantity","span","Profile","avatar","name","tag","stats","className","src","alt","followers","views","likes","defaultProps","Followers","stylesDisplayFlexColumnCenterAll","backgroundColor","css","props","theme","color","StatisticsWrapper","StatHeader","h2","StatList","StatItem","StatLabel","StatPercentage","RandomColor","Math","random","toString","substr","Statistics","title","map","stat","key","id","label","percentage","FriendListWrapper","FriendInfo","FriendStatus","isOnline","FriendAvatar","FriendName","FriendList","friends","friend","TableTransactionHistory","table","TableHeaderRow","thead","TableRow","tr","isEven","TransactionHistory","items","item","indexOf","type","amount","currency","ReactDOM","render","StrictMode","user","document","getElementById","statisticalData","transactions","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7f15675.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\n// const stylesDisplayFlexColumnCenterAll = 'margin: auto; display: flex; justify-self: center; flex-direction: column; align-items: center; justify-content: center;'\n// const stylesTextArial\nconst StyledProfileWrapper = styled.div`\n  margin: auto;\n  display: flex;\n  justify-self: center;\n  flex-direction: column;\n  font-family: 'Arial';\n  background-color: white;\n  width: 250px;\n  height: 330px;\n  border: 2px solid grey;\n  border-radius: 10px;\n`;\n\nconst StyledProfileDescription = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  height: 80%;\n  justify-content: center;\n`;\n\nconst StyledAvatar = styled.img`\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n`;\n\nconst StyledUserName = styled.p`\n  font-size: 18px;\n  color: rgb(18, 34, 54);\n  font-weight: bold;\n  margin: 0;\n  padding: 15px;\n`;\n\nconst StyledUserTag = styled(StyledUserName)`\n  font-size: 14px;\n  font-weight: normal;\n  color: rgb(118, 134, 150);\n  padding-top: 0;\n`;\n\nconst StyledUserLocation = styled(StyledUserTag)``;\n\nconst StyledProfileStats = styled.ul`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n  justify-content: space-around;\n  background-color: #f3f6f9;\n  height: 40%;\n  border-radius: 0 0 10px 10px;\n`;\n\nconst applyStyles = () => styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  width: 33%;\n  height: 100%;\n  border-left: 2px solid grey;\n  border-right: 2px solid grey;\n  border-top: 2px solid grey;\n  list-style-type: none;\n  justify-content: space-around;\n  font-size: 12px;\n  color: black;\n`;\n\nconst StyledProfileViews = applyStyles();\nconst StyledProfileFollowers = styled(StyledProfileViews)`\n  border-radius: 0 0 0 10px;\n  border: 0;\n  border-top: 2px solid grey;\n`;\nconst StyledProfileLikes = styled(StyledProfileViews)`\n  border-radius: 0 0 10px 0;\n  border: 0;\n  border-top: 2px solid grey;\n`;\nconst statsQuantityTextSize = () => styled.span`\n  font-size: 14px;\n  font-weight: bold;\n`;\nconst StyledStatsQuantity = statsQuantityTextSize();\n\nexport {\n  StyledProfileWrapper,\n  StyledProfileDescription,\n  StyledAvatar,\n  StyledUserName,\n  StyledUserTag,\n  StyledUserLocation,\n  StyledProfileStats,\n  StyledProfileFollowers,\n  StyledProfileViews,\n  StyledProfileLikes,\n  StyledStatsQuantity,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StyledProfileWrapper,\n  StyledProfileDescription,\n  StyledAvatar,\n  StyledUserName,\n  StyledUserTag,\n  StyledUserLocation,\n  StyledProfileStats,\n  StyledProfileFollowers,\n  StyledProfileViews,\n  StyledProfileLikes,\n  StyledStatsQuantity,\n} from './StylesForSocialProfile';\n\nconst Profile = ({ avatar, name, tag, location, stats }) => {\n  // const Followers=stats.followers\n  return (\n    <StyledProfileWrapper className=\"profile\">\n      <StyledProfileDescription className=\"description\">\n        <StyledAvatar src={avatar} alt={name} className=\"avatar\" />\n        <StyledUserName className=\"name\">{name}</StyledUserName>\n        <StyledUserTag className=\"tag\">@{tag}</StyledUserTag>\n        <StyledUserLocation className=\"location\">{location}</StyledUserLocation>\n      </StyledProfileDescription>\n\n      <StyledProfileStats className=\"stats\">\n        <StyledProfileFollowers>\n          <span className=\"label\">Followers</span>\n          <StyledStatsQuantity className=\"quantity\">\n            {stats.followers || 0}\n          </StyledStatsQuantity>\n        </StyledProfileFollowers>\n        <StyledProfileViews>\n          <span className=\"label\">Views</span>\n          <StyledStatsQuantity className=\"quantity\">\n            {stats.views || 0}\n          </StyledStatsQuantity>\n        </StyledProfileViews>\n        <StyledProfileLikes>\n          <span className=\"label\">Likes</span>\n          <StyledStatsQuantity className=\"quantity\">\n            {stats.likes || 0}\n          </StyledStatsQuantity>\n        </StyledProfileLikes>\n      </StyledProfileStats>\n    </StyledProfileWrapper>\n  );\n};\n\nProfile.propTypes = {\n  avatar: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  stats: PropTypes.shape({\n    followers: PropTypes.number,\n    views: PropTypes.number,\n    likes: PropTypes.number,\n  }),\n};\nProfile.defaultProps = {\n  avatar: 'https://dummyimage.com/100x100/0e6ec7/fff.png&text=No+Avatar',\n  Followers: 0,\n  stats: { followers: 0, views: 0, likes: 0 },\n};\n\nexport default Profile;\n","import styled, { css } from 'styled-components';\n\nconst stylesDisplayFlexColumnCenterAll =\n  'margin: auto; display: flex; justify-self: center; flex-direction: column; align-items: space-around; justify-content: space-around;';\nconst stylesDisplayFlexRow =\n  'margin: 0; padding: 0; display: flex;  align-items: space-around; justify-content: space-around;';\nconst stylesTextArial16pxUppercase =\n  \"font-family: 'Arial'; text-align: center; font-size: 16px; text-transform: uppercase; text-justify: center; color: black;\";\nconst stylesTextArial12px =\n  \"font-family: 'Arial'; text-align: center; font-size: 12px; color: white; font-weight: bold;\";\n\nconst backgroundColor = css`\n  background: ${props => props.theme.color};\n`;\nconst StatisticsWrapper = styled.div`\n  ${stylesDisplayFlexColumnCenterAll}\n  ${stylesTextArial12px}\n  width: 270px;\n  height: 130px;\n  border: 2px solid grey;\n`;\n\nconst StatHeader = styled.h2`\n  ${stylesTextArial16pxUppercase}\n\n  margin:0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 50%;\n`;\n\nconst StatList = styled.ul`\n  ${stylesDisplayFlexRow}\n  height: 50%;\n`;\n\nconst StatItem = styled.li`\n  ${stylesDisplayFlexColumnCenterAll};\n  ${backgroundColor}\n  margin: 0;\n  width: 20%;\n`;\nconst StatLabel = styled.span``;\nconst StatPercentage = styled.span`\n  font-size: 16px;\n`;\n\nexport {\n  StatisticsWrapper,\n  StatHeader,\n  StatList,\n  StatItem,\n  StatLabel,\n  StatPercentage,\n};\n","function RandomColor() {\n  return '#' + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6);\n}\nexport default RandomColor;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider } from 'styled-components';\n\nimport {\n  StatisticsWrapper,\n  StatHeader,\n  StatList,\n  StatItem,\n  StatLabel,\n  StatPercentage,\n} from './StylesForStatistics';\n\nimport RandomColor from './RandomColor';\n\nconst Statistics = ({ stats, title }) => {\n  return (\n    <StatisticsWrapper className=\"statistics\">\n      <StatHeader className=\"title\">{title}</StatHeader>\n\n      <StatList className=\"stat-list\">\n        {stats.map(stat => (\n          <ThemeProvider key={stat.id} theme={{ color: RandomColor }}>\n            <StatItem>\n              <StatLabel>{stat.label}</StatLabel>\n              <StatPercentage>{stat.percentage}%</StatPercentage>\n            </StatItem>\n          </ThemeProvider>\n        ))}\n      </StatList>\n    </StatisticsWrapper>\n  );\n};\nStatistics.propTypes = {\n  title: PropTypes.string,\n\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      label: PropTypes.string,\n      percentage: PropTypes.number,\n    }),\n  ),\n};\nStatistics.defaultProps = {\n  title: 'Upload stats',\n};\nexport default Statistics;\n","import styled from 'styled-components';\n\nconst FriendListWrapper = styled.ul`\n  list-style-type: none;\n  width: 350px;\n  margin: auto;\n  padding-inline-start: 0;\n`;\n\nconst FriendInfo = styled.li`\n  margin: 10px;\n  justify-self: center;\n  display: flex;\n  align-items: center;\n  border: 2px grey solid;\n  border-radius: 10px;\n  height: 80px;\n`;\nconst FriendStatus = styled.span`\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n  margin: 20px;\n  background-color: ${props => (props.isOnline ? 'green' : 'red')};\n`;\nconst FriendAvatar = styled.img`\n  width: 48px;\n  height: 48px;\n  border-radius: 24px;\n  margin: 10px;\n`;\nconst FriendName = styled.p`\n  font-family: 'Arial';\n  font-size: 16px;\n  margin: 10px;\n`;\n\nexport {\n  FriendListWrapper,\n  FriendInfo,\n  FriendAvatar,\n  FriendStatus,\n  FriendName,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FriendListWrapper,\n  FriendInfo,\n  FriendAvatar,\n  FriendStatus,\n  FriendName,\n} from './StylesForFriendList';\n\nconst FriendList = ({ friends }) => {\n  return (\n    <FriendListWrapper className=\"friend-list\">\n      {friends.map(friend => (\n        <FriendInfo key={friend.id} className=\"item\">\n          <FriendStatus isOnline={friend.isOnline}></FriendStatus>\n          <FriendAvatar\n            className=\"avatar\"\n            src={friend.avatar}\n            alt={friend.name}\n          />\n          <FriendName className=\"name\">{friend.name}</FriendName>\n        </FriendInfo>\n      ))}\n    </FriendListWrapper>\n  );\n};\nFriendList.propTypes = {\n  friends: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      isOnline: PropTypes.bool.isRequired,\n      avatar: PropTypes.string,\n    }),\n  ),\n};\n\nexport default FriendList;\n","import styled from 'styled-components';\n\nconst TableTransactionHistory = styled.table`\n  width: 90%;\n  margin: auto;\n  font-family: 'Arial';\n`;\n\nconst TableHeaderRow = styled.thead`\n  background-color: #00bcd4;\n  tr {\n    height: 50px;\n\n    th {\n      text-transform: uppercase;\n      color: white;\n      width: 33%;\n    }\n  }\n`;\n\nconst TableRow = styled.tr`\n  width: 33%;\n  height: 50px;\n  background-color: ${props => (props.isEven ? 'white' : '#ecf2f3')};\n  td {\n    text-transform: capitalize;\n    text-align: center;\n    width: 33%;\n  }\n`;\n\nexport { TableTransactionHistory, TableHeaderRow, TableRow };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Styles from './StylesForTransanctionHistory';\n\nconst TransactionHistory = ({ items }) => {\n  return (\n    <Styles.TableTransactionHistory className=\"transaction-history\">\n      <Styles.TableHeaderRow>\n        <tr>\n          <th>Type</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </Styles.TableHeaderRow>\n\n      <tbody>\n        {items.map(item => (\n          <Styles.TableRow isEven={items.indexOf(item) % 2 === 0} key={item.id}>\n            <td>{item.type}</td>\n            <td>{item.amount}</td>\n            <td>{item.currency}</td>\n          </Styles.TableRow>\n        ))}\n      </tbody>\n    </Styles.TableTransactionHistory>\n  );\n};\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default TransactionHistory;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Profile from './social-profile/socialProfile.jsx';\nimport user from './social-profile/user.json';\nimport Statistics from './statistics/statistics.jsx';\nimport statisticalData from './statistics/statistical-data.json';\nimport FriendList from './friend-list/FriendsList.jsx';\nimport friends from './friend-list/friends.json';\nimport TransactionHistory from './transaction-history/TransactionHistory.jsx';\nimport transactions from './transaction-history/transactions.json';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Profile\n      name={user.name}\n      tag={user.tag}\n      location={user.location}\n      avatar={user.avatar}\n      stats={user.stats}\n    />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\nReactDOM.render(\n  <Statistics title=\"Upload stats\" stats={statisticalData} />,\n  document.getElementById('root2'),\n);\n\nReactDOM.render(\n  <FriendList friends={friends} />,\n  document.getElementById('root3'),\n);\n\nReactDOM.render(\n  <TransactionHistory items={transactions} />,\n  document.getElementById('root4'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}